-- Initialize etcd client
local etcd
if os.getenv('ETCD_ADDR') then
  etcd = require('etcd').new(os.getenv('ETCD_ADDR'))
else
  etcd = require('etcd').new()
end

-- Use set host IP if available
local host_ip = os.getenv('HOST_IP')

-- Otherwise attempt to automatically discover IP, which seems to work well
-- when this container is run with --net=host
if host_ip == nil then
  local handle = io.popen('ip route get 1 | awk "{print \\$NF;exit}"')
  host_ip = handle:read('*a'):gsub('^%s*(.-)%s*$', '%1')
  handle:close()
end

---- GENERATED CODE ----

{{ range $_, $container := . }}
{{ if $container.Env._SIREN_GROUP }}
---- Entry for: {{ $container.Name }}
-- Host ports
{{ range $address := $container.Addresses }}
{{ if $address.HostPort}}
etcd:set(
  '/siren/{{ js $container.Env._SIREN_GROUP }}/{{ js $container.ID }}/interface/{{ js $address.Port }}',
  host_ip .. ':{{ js $address.HostPort }}')
{{ end }}
{{ end }}
-- Custom params
{{ if $container.Env._SIREN_PARAMS }}
local params = '{{ js $container.Env._SIREN_PARAMS }},'
params:gsub("([^,]*),", function(c)
  local key, value = c:match("([^=]*)=(.*)")
  etcd:set(
    '/siren/{{ js $container.Env._SIREN_GROUP }}/{{ js $container.ID }}/params/' .. key,
    value)
end)
{{ end }}
-- Refresh expiration for this container
etcd:set(
  '/siren/{{ js $container.Env._SIREN_GROUP }}/{{ js $container.ID }}',
  nil,
  {dir=true, prevExist=true, ttl=15})
{{ end }}
{{ end }}

---- END GENERATED CODE ----
